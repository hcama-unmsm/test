apiVersion: v1
kind: Namespace
metadata:
  name: sonar
---
apiVersion: v1
kind: Secret
metadata:
  name: pg-secret
  namespace: sonar
type: Opaque
stringData:
  POSTGRES_PASSWORD: superseguro123
  POSTGRES_USER: sonar
  POSTGRES_DB: sonarqube
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-data
  namespace: sonar
spec:
  storageClassName: local-path
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: sonar
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
        - name: POSTGRES_USER
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
        - name: POSTGRES_DB
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_DB } }
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: pg-data
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: sonar
  labels:
    app: postgres
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-data
  namespace: sonar
spec:
  storageClassName: local-path
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonar
  labels:
    app: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command: ["sh","-c"]
        args:
          - >
            until nc -zv postgres.sonar.svc.cluster.local 5432; do
              echo "Esperando Postgres...";
              sleep 2;
            done
      - name: fix-perms-sonar
        image: busybox:1.36
        command: ["sh","-c"]
        args: ["mkdir -p /opt/sonarqube/data && chown -R 1000:1000 /opt/sonarqube/data || true"]
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
      containers:
      - name: sonarqube
        image: sonarqube:community
        ports:
        - containerPort: 9000
        env:
        - name: SONAR_JDBC_URL
          value: jdbc:postgresql://postgres.sonar.svc.cluster.local:5432/sonarqube
        - name: SONAR_JDBC_USERNAME
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
        - name: SONAR_JDBC_PASSWORD
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
        - name: SONAR_SEARCH_JAVAADDITIONALOPTS
          value: "-Dnode.store.allow_mmap=true"
        # Temporalmente desactiva checks de ES si el host aún no tiene vm.max_map_count=262144
        - name: SONAR_ES_BOOTSTRAP_CHECKS_DISABLE
          value: "true"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        readinessProbe:
          httpGet: { path: /, port: 9000 }
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 18
        livenessProbe:
          httpGet: { path: /, port: 9000 }
          initialDelaySeconds: 120
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 6
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarqube-data
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonar
  labels:
    app: sonarqube
spec:
  type: ClusterIP
  selector:
    app: sonarqube
  ports:
  - name: http
    port: 9000
    targetPort: 9000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarqube
  namespace: sonar
  annotations:
    # Para nginx puedes añadir límites de body, timeouts, etc.
    nginx.ingress.kubernetes.io/proxy-body-size: "64m"
spec:
  # ? Usa SOLO una según tu controlador:
  # ingressClassName: traefik   # si usas Traefik (k3s por defecto)
  ingressClassName: nginx       # si usas ingress-nginx
  rules:
  - host: sonar.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarqube
            port:
              number: 9000
