apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: seguridad
  labels:
    app: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0           # no levanta 2 pods a la vez con el mismo PVC
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      terminationGracePeriodSeconds: 90   # da tiempo a ES para cerrar limpio
      securityContext:
        runAsNonRoot: true
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: es-clean-lock
        image: busybox:1.36
        command: ["sh","-c"]
        args: ["rm -f /opt/sonarqube/data/es8/node.lock || true"]
        volumeMounts:
        - name: data
          mountPath: /opt/sonarqube/data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
      - name: wait-for-postgres
        image: busybox:1.36
        command: ["sh","-c"]
        args:
          - >
            until nc -zv postgres.seguridad.svc.cluster.local 5432; do
              echo "Esperando Postgres...";
              sleep 2;
            done
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
      - name: fix-perms-sonar
        image: busybox:1.36
        command: ["sh","-c"]
        args: ["mkdir -p /opt/sonarqube/data && chown -R 1000:1000 /opt/sonarqube/data || true"]
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
      containers:
      - name: sonarqube
        image: sonarqube:25.9.0.112764-community
        ports:
        - containerPort: 9000
        env:
        - name: SONAR_JDBC_URL
          value: jdbc:postgresql://postgres.seguridad.svc.cluster.local:5432/sonarqube
        - name: SONAR_JDBC_USERNAME
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
        - name: SONAR_JDBC_PASSWORD
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
        - name: SONAR_SEARCH_JAVAADDITIONALOPTS
          value: "-Dnode.store.allow_mmap=true"
        # Temporalmente desactiva checks de ES si el host aún no tiene vm.max_map_count=262144
        - name: SONAR_ES_BOOTSTRAP_CHECKS_DISABLE
          value: "true"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        readinessProbe:
          httpGet: { path: /, port: 9000 }
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 18
        livenessProbe:
          httpGet: { path: /, port: 9000 }
          initialDelaySeconds: 120
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 6
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarqube-data