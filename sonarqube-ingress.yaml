apiVersion: v1
kind: Namespace
metadata:
  name: sonar
---
apiVersion: v1
kind: Secret
metadata:
  name: pg-secret
  namespace: sonar
type: Opaque
stringData:
  POSTGRES_PASSWORD: superseguro123
  POSTGRES_USER: sonar
  POSTGRES_DB: sonarqube
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-data
  namespace: sonar
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: sonar
spec:
  replicas: 1
  selector:
    matchLabels: { app: postgres }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
        - name: POSTGRES_USER
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
        - name: POSTGRES_DB
          valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_DB } }
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: pg-data
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: sonar
spec:
  type: ClusterIP
  selector: { app: postgres }
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-data
  namespace: sonar
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonar
spec:
  type: ClusterIP
  selector: { app: sonarqube }
  ports:
  - name: http
    port: 9000
    targetPort: 9000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarqube
  namespace: sonar
  annotations:
    # Si usas Traefik (k3s por defecto), puedes dejar esta anotación o usar ingressClassName abajo.
    # kubernetes.io/ingress.class: "traefik"
    # Para nginx (si instalaste ingress-nginx), ejemplo de tamaño máx. de body:
    nginx.ingress.kubernetes.io/proxy-body-size: "64m"
spec:
  # ? Usa EXACTAMENTE una de estas opciones:
  # 1) Para Traefik (k3s default):
  # ingressClassName: traefik
  # 2) Para NGINX:
  ingressClassName: nginx
  rules:
  - host: sonar.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarqube
            port:
              number: 9000
